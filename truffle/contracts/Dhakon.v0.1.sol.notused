// SPDX-License-Identifier: MIT

pragma solidity ^0.8.11;

import "@chainlink/contracts/src/v0.8/VRFConsumerBase.sol";

contract Dhakon is VRFConsumerBase {
    address public owner;
    address payable[] public players;
    address payable[] public winners;
    bool public isPickingWinner;

    bytes32 internal keyHash; // identifies which Chainlink oracle to use
    uint internal fee;        // fee to get random number

    constructor(
        address _VRFCoordinator, 
        address _LINKToken, 
        bytes32 _keyHash,
        uint _fee)
        VRFConsumerBase(
            _VRFCoordinator,        // VRF coordinator 0xb3dCcb4Cf7a26f6cf6B120Cf5A73875B7BBc655B
            _LINKToken              // LINK token address 0x01BE23585060835E02B77ef475b0Cc51aA1e0709
        ) {
            keyHash = _keyHash;     // 0x2ed0feb3e7fd2022120aa84fab1945545a9f2ffc9076fd6156fa96eaff4c1311;
            fee = _fee;  // 0.1 * 10 ** 18;    // 0.1 LINK

            owner = msg.sender;
        }

    function getRandomNumber() public returns (bytes32 requestId) {
        require(LINK.balanceOf(address(this)) >= fee, "Not enough LINK in contract");
        return requestRandomness(keyHash, fee);
    }

    function fulfillRandomness(bytes32 requestId, uint randomness) internal override {
        uint index = randomness % players.length;
        payWinner(index);
        isPickingWinner = false;
    }

    function getWinnerByRound(uint round) public view returns (address payable) {
        require(round <= winners.length, "There is no such round");
        return winners[round-1];
    }

    function getBalance() public view returns (uint) {
        return address(this).balance;
    }

    function getPlayers() public view returns (address payable[] memory) {
        return players;
    }

    function enter() public payable {
        require(msg.value > .01 ether);

        // address of player entering dhakon
        players.push(payable(msg.sender));
    }

    function pickWinner() public onlyowner {
        require(!isPickingWinner);
        isPickingWinner = true;
        getRandomNumber();
    }

    function payWinner(uint playerIndex) public {

        players[playerIndex].transfer(address(this).balance);

        winners.push(players[playerIndex]);
        
        // reset the state of the contract
        players = new address payable[](0);
    }

    modifier onlyowner() {
      require(msg.sender == owner);
      _;
    }
}